题目：
有 N 个花园，按从 1 到 N 标记。在每个花园中，你打算种下四种花之一。paths[i] = [x, y] 描述了花园 x 到花园 y 的双向路径。
另外，没有花园有 3 条以上的路径可以进入或者离开。你需要为每个花园选择一种花，使得通过路径相连的任何两个花园中的花的种类互不相同。
以数组形式返回选择的方案作为答案 answer，其中 answer[i] 为在第 (i+1) 个花园中种植的花的种类。花的种类用  1, 2, 3, 4 表示。保证存在答案。

示例 1：
输入：N = 3, paths = [[1,2],[2,3],[3,1]]
输出：[1,2,3]
示例 2：
输入：N = 4, paths = [[1,2],[3,4]]
输出：[1,2,1,2]
示例 3：
输入：N = 4, paths = [[1,2],[2,3],[3,4],[4,1],[1,3],[2,4]]
输出：[1,2,3,4]
 
提示：
1 <= N <= 10000
0 <= paths.size <= 20000

解释：
着色问题，确保相连的花园是不同颜色。
采用Java中的HashSet，先存储相邻花园的颜色，然后从里面选取不一样的一种，着色。

知识点终结：
1.关于HashSet
使用时需要头文件，import java.util.HashSet
申请方式：HashSet<类型> 名字 = new HashSet<>();//随机存储四个颜色
常用函数：
  1） set.clear();//清除
  2） set.add(数字);//加入数字
  3） set.contains();//检查给定HashSet中是否存在元素


代码：
import java.util.HashSet
class Solution {
    public int[] gardenNoAdj(int N, int[][] paths) {
        // 构造图结构
        int[] A = new int[N];//构建四个花园
        byte[][] map = new byte[N][N];//构建路径
        for (int p[] : paths) {
            map[p[0] - 1][p[1] - 1] = -1;
            map[p[1] - 1][p[0] - 1] = -1;
        }

        //A处：将相邻且上过色的节点保存
        //B处：利用set快速找出可选择的颜色，进行上色
        
        
        HashSet<Integer> set = new HashSet<>(4);//随机存储四个颜色

        for (int i = 0; i < N; ++i) {

            if (A[i] > 0) continue;

            set.clear();//清除
            for (int j = 0; j < N; ++j) {
                if (map[i][j] != -1) continue;//相邻的节点
                if (A[j] == 0) continue;//且着色
                set.add(A[j]);//A，保存
            }
            for (int j = 1; j < 5; j++) {
                if (set.contains(j)) continue; //B，contains方法的目的是检查给定HashSet中是否存在元素。如果找到该元素，则返回true，否则返回false。
                A[i] = j;
                break;
            }

        }
        return A;
    }
}


