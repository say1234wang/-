树的路径问题汇总概述

1
给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。

说明: 叶子节点是指没有子节点的节点。

示例: 
给定如下二叉树，以及目标和 sum = 22，

              5
             / \
            4   8
           /   / \
          11  13  4
         /  \      \
        7    2      1
返回 true, 因为存在目标和为 22 的根节点到叶子节点的路径 5->4->11->2。

分析：单纯计算是否存在根->叶的路径，所以找到几个返回即可，所以用最简单的递归调用，每次先判断sum值是否等于节点数值，不是的话递归调用，同时
sum变为 sum减去本节点的值

题解：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
class Solution {
public:
    bool hasPathSum(TreeNode* root, int sum) {
        if(root == NULL)//判断是否为空节点
        {
            return false;
        }
        if(root->val == sum)
        {
            if(root->left == NULL && root->right ==NULL)
               return true;
        }
        return hasPathSum(root->left,sum-root->val) | hasPathSum(root->right,sum - root->val);//注意两种情况的返回中间用|链接
    }
};



2.给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于给定目标和的路径。

说明: 叶子节点是指没有子节点的节点。

示例:
给定如下二叉树，以及目标和 sum = 22，

              5
             / \
            4   8
           /   / \
          11  13  4
         /  \    / \
        7    2  5   1
返回:

[
   [5,4,11,2],
   [5,8,4,5]
]

分析：本次是返回所有路径，所以用到了二维容器，在public中申请一个vector<vector<int>> ans，用来记录所有的路径并返回
同时递归调用，在函数中申请一个vector<int> sum1，记录每次从根到叶的路径，判定每个节点是否为叶子节点，如果是，将sum1的所以数字累加，判断
是否等于sum，这里用到了容器相对简便的求和方式，即基于范围的for求和

题解：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> ans;//定义一个二维容器用来存储

    vector<vector<int>> pathSum(TreeNode* root, int sum) {
        if(root == NULL)
        {
            return ans ;
        }
        DFS(root,sum,{});//没有容器的时候可以用{}表示空容器
        return ans;
    }

    void DFS(TreeNode* root, int sum, vector<int> sum1)
    {
        int s=0;
        if(root!= NULL)
            sum1.push_back(root->val);//将根节点的值加入容器sum1

        if(root!=NULL && root->left == NULL && root->right == NULL)//如果是叶节点
        {
            for(auto n : sum1)//基于范围的for循环
            {
                s=s+n;
            }

            if(s == sum)
            {
                ans.push_back(sum1);//将sum1加入二维容器
                sum1={};
            }
        }
        if(root->left != NULL)
            DFS(root->left,sum,sum1);
        if(root->right != NULL)
            DFS(root->right,sum,sum1);
    }
};


3.
给定一个二叉树，它的每个结点都存放着一个整数值。

找出路径和等于给定数值的路径总数。

路径不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。

二叉树不超过1000个节点，且节点数值范围是 [-1000000,1000000] 的整数。

示例：

root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8

      10
     /  \
    5   -3
   / \    \
  3   2   11
 / \   \
3  -2   1

返回 3。和等于 8 的路径有:

1.  5 -> 3
2.  5 -> 2 -> 1
3.  -3 -> 11

分析：这个难点在于开始和结束很灵活，所以就要递归的使用根节点，设计两个函数，一个是递归地调用根节点，一个用来计算是否为路径，

题解：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int num = 0;

    int pathSum(TreeNode* root, int sum) {  //递归地调用遍历根节点的函数
        bianli(root,sum);
        return num;
    }

    void bianli (TreeNode* root ,int sum){ //递归式寻找终点
        if(root == NULL)
        {
            return ;
        }
        do_number(root,sum);
        bianli(root->left,sum);
        bianli(root->right,sum);
    }

    void do_number(TreeNode* root , int sum)//分析，减去当前节点的值
    {
        if(root == NULL)
        {
            return;
        }
        if(root->val == sum)
        {
            num++;
        }
        do_number(root->left,sum-root->val);
        do_number(root->right,sum-root->val);

    }


};
